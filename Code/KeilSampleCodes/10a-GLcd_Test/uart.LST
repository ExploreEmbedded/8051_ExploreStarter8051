C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN uart.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uart.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /***************************************************************************************************
   2                                             ExploreEmbedded  
   3          ****************************************************************************************************
   4           * File:   uart.c (AVR controllers)
   5           * Version: 15.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: File contains the Library routines for UART
   9          
  10          The libraries have been tested on ExploreEmbedded development boards. We strongly believe that the 
  11          library works on any of development boards for respective controllers. However, ExploreEmbedded 
  12          disclaims any kind of hardware failure resulting out of usage of libraries, directly or indirectly.
  13          Files may be subject to change without prior notice. The revision history contains the information 
  14          related to updates. 
  15          
  16          
  17          GNU GENERAL PUBLIC LICENSE: 
  18              This program is free software: you can redistribute it and/or modify
  19              it under the terms of the GNU General Public License as published by
  20              the Free Software Foundation, either version 3 of the License, or
  21              (at your option) any later version.
  22          
  23              This program is distributed in the hope that it will be useful,
  24              but WITHOUT ANY WARRANTY; without even the implied warranty of
  25              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  26              GNU General Public License for more details.
  27          
  28              You should have received a copy of the GNU General Public License
  29              along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  30          
  31          Errors and omissions should be reported to codelibraries@exploreembedded.com
  32           **************************************************************************************************/
  33          
  34          
  35          /**************************************************************************************************
  36                                       Revision History
  37          ****************************************************************************************************
  38          15.0: Initial version 
  39          ***************************************************************************************************/
  40          #include <stdarg.h>
  41          #include "uart.h"
  42          
  43          
  44          
  45          
  46          /***************************************************************************************************
  47                                   void UART_Init(uint32_t var_baudRate_u32)
  48          ****************************************************************************************************
  49           * I/P Arguments: uint32_t : Baudrate to be configured.
  50           * Return value : none
  51          
  52           * description  :This function is used to initialize the UART at specified baud rate.
  53                           If the requested baud rate is not within the supported range then
  54                           the default baud rate of 9600 is set.
  55          
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 2   

  56          
  57                  Refer uart.h file for Supported(range) baud rates.    
  58          ***************************************************************************************************/
  59          void UART_Init(uint32_t var_baudRate_u32)
  60          { 
  61   1        TMOD |= 0x20; //Timer1 in Mode2.
  62   1          SCON=0x50;    // Asynchronous mode, 8-bit data and 1-stop bit
  63   1          TR1=1;        //Turn ON the timer for Baud rate generation
  64   1        UART_SetBaudRate(var_baudRate_u32);
  65   1      }
  66          
  67          
  68          
  69          
  70          
  71          
  72          /***************************************************************************************************
  73                                   void UART_SetBaudRate(uint32_t var_baudRate_u32)
  74           ***************************************************************************************************
  75           * I/P Arguments: uint32_t : var_baudRate_u32 to be configured.
  76           * Return value : none
  77          
  78           * description  :This function is used to Set/Change the baudrate on the fly.
  79                           If the requested baud rate is not within the supported range then
  80                           the default baudrate of 9600 is set.
  81          
  82                  Refer uart.h file for Supported range of baud rates.
  83          ***************************************************************************************************/
  84          void UART_SetBaudRate(uint32_t var_baudRate_u32)
  85          {
  86   1        sint8_t RegValue;
  87   1      
  88   1        if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
  89   1        {
  90   2          /* Check if the requested baudate is within range,
  91   2             If yes then calculate the value to be loaded into baud rate generator. */
  92   2          RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
  93   2        }
  94   1        else
  95   1        {
  96   2          /*   Invalid baudrate requested, hence set it to default baudrate of 9600 */
  97   2          RegValue = M_GetBaudRateGeneratorValue(9600);
  98   2        }
  99   1      
 100   1        TH1 = RegValue; 
 101   1      }
 102          
 103          
 104          
 105          
 106          
 107          /***************************************************************************************************
 108                                        char UART_RxChar()
 109           ***************************************************************************************************
 110           * I/P Arguments: none.
 111           * Return value : char: Ascii value of the character received
 112          
 113           * description :This function is used to receive a char from UART module.
 114                          It waits till a char is received and returns it after reception.
 115          ***************************************************************************************************/
 116          char UART_RxChar()
 117          {
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 3   

 118   1          while(RI==0);   // Wait till the data is received
 119   1          RI=0;             // Clear Receive Interrupt Flag for next cycle
 120   1          
 121   1        return(SBUF);   // return the received char
 122   1      }
 123          
 124          
 125          
 126          
 127          
 128          
 129          
 130          
 131          /***************************************************************************************************
 132                                   void UART_TxChar(char var_uartData_u8)
 133          ****************************************************************************************************
 134           * I/P Arguments: char--> Ascii value of the character to be transmitted.
 135           * Return value : none.
 136          
 137           * description  :This function is used to transmit a char through UART module.
 138          ***************************************************************************************************/
 139          void UART_TxChar(char var_uartData_u8)
 140          {
 141   1        SBUF=var_uartData_u8; // Load the data to be transmitted
 142   1          while(TI==0);       // Wait till the data is trasmitted
 143   1          TI=0;           //Clear the Tx flag for next cycle.
 144   1      }
 145          
 146          
 147          
 148          
 149          
 150          
 151          
 152          /***************************************************************************************************
 153                                   void UART_TxString(char *ptr_stringPointer_u8)
 154          ****************************************************************************************************
 155           * I/P Arguments: String(Address of the string) to be transmitted.
 156           * Return value : none
 157          
 158           * description :This function is used to transmit a NULL terminated string through UART.
 159                         1.The ptr_stringPointer_u8 points to the first char of the string
 160                              and traverses till the end(NULL CHAR) and transmits a char each time
 161          ***************************************************************************************************/
 162          #if (Enable_UART_TxString==1)
 163          void UART_TxString(char *ptr_stringPointer_u8)
 164          {
 165   1        while(*ptr_stringPointer_u8)
 166   1          UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 167   1      }
 168          #endif
 169          
 170          
 171          
 172          
 173          
 174          
 175          /***************************************************************************************************
 176                                   void UART_RxString(char *ptr_stringPointer_u8)
 177          ****************************************************************************************************
 178           * I/P Arguments: char *:  Address of the string/buffer where the received data needs to be stored
 179           * Return value : none
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 4   

 180          
 181           * description  :
 182                        1.This function is used to receive a ASCII string through UART till the carriage_return/New_
             -line
 183                        2.The stream of data is copied to the buffer till carriage_return/New_line is encountered.
 184                  3. Once the Carriage_return/New_Line is received the string will be null terminated.
 185          
 186           *****NOTE*******:
 187            1.The received char is ECHOED back,
 188              if not required then comment UART_TxChar(ch) in the code.
 189            2.BackSlash is not taken care.
 190          ***************************************************************************************************/
 191          #if (Enable_UART_RxString==1)
 192          void UART_RxString(char *ptr_stringPointer_u8)
 193          {
 194   1        char ch;
 195   1        while(1)
 196   1        {
 197   2          ch=UART_RxChar();    //Receive a char
 198   2          UART_TxChar(ch);     //Echo back the received char
 199   2      
 200   2          if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
 201   2          {                //once enter key is pressed null terminate the string
 202   3            *ptr_stringPointer_u8=0;           //and break the loop
 203   3            break;          
 204   3          }
 205   2          *ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
 206   2          ptr_stringPointer_u8++;
 207   2        }
 208   1      }
 209          #endif
 210          
 211          
 212          
 213          
 214          
 215          
 216          /***************************************************************************************************
 217                  void  UART_TxDecimalNumber(uint32_t var_decNumber_u32, uint8_t var_numOfDigitsToTransmit_u8 )
 218           ***************************************************************************************************
 219           * I/P Arguments: uint32_t: Number to be transmitted on UART.
 220                            uint8_t : Number of digits to be transmitted
 221           * Return value : none
 222          
 223           * description  :This function is used to transmit a max of 10digit decimal number.
 224                          2nd parameter specifies the number of digits from the right side to be transmitted
 225                           The output for the input combinations is as below
 226                          1.(12345,4) then 4-digits ie. 2345 will be transmitted
 227                  2.(12345,6) then 6-digits ie. 012345 will be transmitted
 228                  3.(12345,C_DefaultDigitsToTransmit_U8) then 12345 will be transmitted.
 229          ***************************************************************************************************/
 230          #if ((Enable_UART_TxDecimalNumber==1) || (Enable_UART_TxFloatNumber==1))
 231          void UART_TxDecimalNumber(uint32_t var_decNumber_u32, uint8_t var_numOfDigitsToTransmit_u8)
 232          {
 233   1        uint8_t i=0,a[10];
 234   1      
 235   1        if(var_decNumber_u32==0)
 236   1        {
 237   2          /* If the number is zero then update the array with the same for transmitting */
 238   2          for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 239   2             a[i] = 0x00;
 240   2        }
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 5   

 241   1        else
 242   1        {
 243   2          for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 244   2          {
 245   3            /* Continue extracting the digits from right side
 246   3               till the Specified var_numOfDigitsToTransmit_u8 */
 247   3            if(var_decNumber_u32!=0)
 248   3            {
 249   4              /* Extract the digits from the number till it becomes zero.
 250   4                First get the remainder and divide the number by 10 each time.
 251   4                      If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
 252   4              The process continues till it becomes zero or max digits reached*/
 253   4              a[i]=util_GetMod32(var_decNumber_u32,10);
 254   4              var_decNumber_u32=var_decNumber_u32/10;
 255   4            }
 256   3            else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 257   3                (var_numOfDigitsToTransmit_u8 > C_MaxDigitsToTransmit_U8))
 258   3            {
 259   4              /* Stop the iteration if the Max number of digits are reached or
 260   4                 the user expects exact(Default) digits in the number to be transmitted */ 
 261   4              break;
 262   4            }
 263   3            else
 264   3            {
 265   4              /*In case user expects more digits to be transmitted than the actual digits in number,
 266   4                  then update the remaining digits with zero.
 267   4                      Ex: var_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
 268   4              a[i]=0;
 269   4            }
 270   3          }
 271   2        }
 272   1      
 273   1        while(i)
 274   1        { 
 275   2          /* Finally get the ascii values of the digits and transmit*/
 276   2          UART_TxChar(util_Dec2Ascii(a[i-1]));
 277   2          i--;
 278   2        }
 279   1      }
 280          #endif
 281          
 282          
 283          
 284          
 285          
 286          
 287          /***************************************************************************************************
 288             void  UART_TxHexNumber(uint32_t var_hexNumber_u32, uint8_t var_numOfDigitsToTransmit_u8 )
 289           ***************************************************************************************************
 290           * Function name:  UART_TxHexNumber()
 291           * I/P Arguments: uint32_t: Hexadecimal Number to be transmitted on UART.
 292                            uint8_t : Number of digits to be transmitted
 293           * Return value : none
 294          
 295           * description  :This function is used to transmit a max of 10digit hex number.
 296                           2nd parameter specifies the number of digits from the right side to be transmitted
 297                           The output for the input combinations is as below
 298                          1.(0x12AB,3) then 3-digits ie. 2AB will be transmitted
 299                  2.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
 300                  3.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.
 301          ***************************************************************************************************/
 302          #if (Enable_UART_TxHexNumber==1)
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 6   

 303          void UART_TxHexNumber(uint32_t var_hexNumber_u32,uint8_t var_numOfDigitsToTransmit_u8)
 304          {
 305   1        uint8_t i=0,a[10];
 306   1      
 307   1        if(var_hexNumber_u32==0)
 308   1        {
 309   2          /* If the number zero then update the array with the same for transmitting */
 310   2          for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 311   2            a[i]=0x00;
 312   2        }
 313   1        else
 314   1        {
 315   2          for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 316   2          {
 317   3            /* Continue extracting the digits from right side till the Specified var_numOfDigitsToTransmit_u8 */
 318   3            if(var_hexNumber_u32!=0)
 319   3            {
 320   4              /* Extract the digits from the number till it becomes zero.
 321   4                First get the lower nibble and shift the number 4 times.
 322   4               If var_number_u32 = 0xABC then extracted digit will be 0x0C and number will become 0xAB.
 323   4               The process continues till it becomes zero or max digits reached*/
 324   4              a[i]=(uint8_t)(var_hexNumber_u32 & 0x0f);
 325   4              var_hexNumber_u32=var_hexNumber_u32 >> 4;
 326   4            }
 327   3            else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 328   3                (var_numOfDigitsToTransmit_u8 > C_MaxDigitsToTransmit_U8))
 329   3            {
 330   4              /* Stop the iteration if the Max number of digits are reached or
 331   4                 the user expects exact(Default) digits in the number to be transmitted */ 
 332   4              break;
 333   4            }
 334   3            else
 335   3            {
 336   4              /* In case user expects more digits to be transmitted than the actual digits in number,
 337   4                         then update the remaining digits with zero.
 338   4                      Ex: var_number_u32 is 0x123 and user wants five digits then 00123 has to be transmitted */
 339   4              a[i]=0x00;
 340   4            }
 341   3          }
 342   2        }
 343   1      
 344   1        while(i!=0)
 345   1        {
 346   2          /* Finally get the ascii values of the digits and transmit*/
 347   2          UART_TxChar(util_Hex2Ascii(a[i-1]));
 348   2          i--;
 349   2        }
 350   1      }
 351          #endif
 352          
 353          
 354          
 355          
 356          
 357          
 358          /***************************************************************************************************
 359                      void  UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
 360           ***************************************************************************************************
 361           * Function name:  UART_TxBinaryNumber()
 362           * I/P Arguments: uint32_t: Hexadecimal Number to be transmitted on UART.
 363                            uint8_t : Number of bits to be transmitted
 364           * Return value : none
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 7   

 365          
 366           * description  :This function is used to transmit the binary equivalent of the given number.
 367                           2nd parameter specifies the number of LSB to be transmitted
 368                           The output for the input combinations is as below
 369                          1.(10,4) then 4-LSB will be transmitted ie. 1010
 370                  2.(10,8) then 8-LSB will be transmitted ie. 00001010
 371                  3.(10,2) then 2-LSB will be transmitted ie. 10
 372          ***************************************************************************************************/
 373          #if (Enable_UART_TxBinaryNumber==1)
 374          void UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
 375          {
 376   1        uint8_t ch;
 377   1      
 378   1        while(var_numOfBitsToTransmit_u8!=0)
 379   1        {
 380   2          /* Start Extracting the bits from the specified bit positions.
 381   2             Get the Acsii values of the bits and transmit */
 382   2          ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToTransmit_u8-1));
 383   2          UART_TxChar(util_Dec2Ascii(ch));
 384   2          var_numOfBitsToTransmit_u8--;
 385   2        }
 386   1      }
 387          #endif
 388          
 389          
 390          
 391          
 392          
 393          
 394          /***************************************************************************************************
 395                      void  UART_TxFloatNumber(float var_floatNumber_f32)
 396           ***************************************************************************************************
 397           * Function name:  UART_TxFloatNumber()
 398           * I/P Arguments: float: float Number to be transmitted on UART.
 399          
 400           * Return value : none
 401          
 402           * description  :This function is used to transmit a floating point number
 403          
 404           * Note         :It supports 6digits of precision.  
 405                   Float will be disabled by default as it takes huge controller resources
 406                 It can be enabled by changing value of Enable_UART_TxFloatNumber to 1 in uart.h   
 407           ***************************************************************************************************/
 408          #if (Enable_UART_TxFloatNumber==1)
              void UART_TxFloatNumber(float var_floatNumber_f32)
              {
                uint32_t var_tempNumber_u32;
                /* Dirty hack to support the floating point by extracting the integer and fractional part.
                    1.Type cast the number to int to get the integer part.
                  2.transmit the extracted integer part followed by a decimal point(.).
                  3.Later the integer part is made zero by subtracting with the extracted integer value.
                  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */
              
                var_tempNumber_u32 = (uint32_t) var_floatNumber_f32;
                UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
              
                UART_TxChar('.');
              
                var_floatNumber_f32 = var_floatNumber_f32 - var_tempNumber_u32;
                var_tempNumber_u32 = var_floatNumber_f32 * 1000000;
                UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
              }
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 8   

              #endif
 428          
 429          
 430          
 431          
 432          
 433          
 434          /***************************************************************************************************
 435                      void UART_Printf(const char *argList, ...)
 436           ***************************************************************************************************
 437           * Function name:  UART_Printf()
 438           * I/P Arguments: variable length arguments similar to printf
 439          
 440           * Return value : none
 441          
 442           * description  :This function is similar to printf function in C.
 443                   It takes the arguments with specified format and prints accordingly
 444                   The supported format specifiers are as below.
 445                   1. %c: character
 446                   2. %d: signed 16-bit number
 447                   3. %D: signed 32-bit number
 448                   4. %u: unsigned 16-bit number
 449                   5. %U: unsigned 32-bit number
 450                   6. %b: 16-bit binary number
 451                   7. %B: 32-bit binary number
 452                   8. %f: Float number
 453                   9. %x: 16-bit hexadecimal number
 454                   10. %X: 32-bit hexadecimal number
 455                   11. %s: String
 456          
 457            Note: By default all the functions will be disabled. The required functions can be enabled by 
 458                  setting the respective compiler switch to 1 in uart.h file.
 459              Ex:  setting Enable_UART_TxDecimalNumber to 1 will enable %d
 460                   setting Enable_UART_TxHexNumber to 1 will enable %x
 461          
 462            Extra feature is available to specify the number of digits to be transmitted using printf.
 463             ex: %4d: will transmit the lower four digits of the decimal number.
 464                 %12b: will transmit the 12-LSB of the number
 465               %d: Will transmit the exact digits of the number
 466               
 467          #####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
 468                  uint8_t var_Num_u8;
 469              UART_Printf("num1:%u",(uint16_t)var_Num_u8);     
 470          ***************************************************************************************************/
 471          #if ( Enable_UART_Printf   == 1 ) 
 472          void UART_Printf(const char *argList, ...)
 473          {
 474   1        const char *ptr;
 475   1        double var_floatNum_f32;
 476   1        va_list argp;
 477   1        sint16_t var_num_s16;
 478   1        sint32_t var_num_s32;
 479   1        uint16_t var_num_u16;
 480   1        uint32_t var_num_u32;
 481   1        char *str;
 482   1        char  ch;
 483   1        uint8_t var_numOfDigitsToTransmit_u8;
 484   1      
 485   1        va_start(argp, argList);
 486   1      
 487   1        /* Loop through the list to extract all the input arguments */
 488   1        for(ptr = argList; *ptr != '\0'; ptr++)
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 9   

 489   1        {
 490   2      
 491   2          ch= *ptr;
 492   2          if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 493   2          {
 494   3              ptr++;
 495   3              ch = *ptr;
 496   3             if((ch>=0x30) && (ch<=0x39))
 497   3            {
 498   4               var_numOfDigitsToTransmit_u8 = 0;
 499   4               while((ch>=0x30) && (ch<=0x39))
 500   4                {
 501   5                 var_numOfDigitsToTransmit_u8 = (var_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 502   5                 ptr++;
 503   5                 ch = *ptr;
 504   5              }
 505   4            }
 506   3            else
 507   3            {
 508   4              var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 509   4            }       
 510   3      
 511   3      
 512   3            switch(ch)       /* Decode the type of the argument */
 513   3            {
 514   4            case 'C':
 515   4            case 'c':     /* Argument type is of char, hence read char data from the argp */
 516   4              ch = va_arg(argp, uint16_t);
 517   4              UART_TxChar(ch);
 518   4              break;
 519   4      
 520   4            case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
 521   4              var_num_s16 = va_arg(argp, sint16_t);
 522   4      #if (Enable_UART_TxDecimalNumber == 1)
 523   4              if(var_num_s16<0)
 524   4               { /* If the number is -ve then display the 2's complement along with '-' sign */ 
 525   5                 var_num_s16 = -var_num_s16;
 526   5                 UART_TxChar('-');
 527   5               }
 528   4              UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
 529   4      #endif
 530   4              break;
 531   4              
 532   4            case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
 533   4              var_num_s32 = va_arg(argp, sint32_t);
 534   4      #if (Enable_UART_TxDecimalNumber == 1)        
 535   4              if(var_num_s32<0)
 536   4               { /* If the number is -ve then display the 2's complement along with '-' sign */
 537   5                 var_num_s32 = -var_num_s32;
 538   5                 UART_TxChar('-');
 539   5               }
 540   4              UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
 541   4      #endif        
 542   4              break;  
 543   4      
 544   4            case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
 545   4              var_num_u16 = va_arg(argp, uint16_t);
 546   4      #if (Enable_UART_TxDecimalNumber == 1)        
 547   4              UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 548   4      #endif        
 549   4              break;
 550   4            
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 10  

 551   4            case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
 552   4              var_num_u32 = va_arg(argp, uint32_t);
 553   4      #if (Enable_UART_TxDecimalNumber == 1)        
 554   4              UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 555   4      #endif        
 556   4              break;      
 557   4      
 558   4            case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
 559   4              var_num_u16 = va_arg(argp, uint16_t);
 560   4      #if (Enable_UART_TxHexNumber == 1)        
 561   4              UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 562   4      #endif        
 563   4              break;
 564   4      
 565   4            case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
 566   4              var_num_u32 = va_arg(argp, uint32_t);
 567   4      #if (Enable_UART_TxHexNumber == 1)            
 568   4              UART_TxHexNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 569   4      #endif        
 570   4              break;
 571   4      
 572   4            
 573   4            case 'b':  /* Argument type is of binary,Read int and convert to binary */
 574   4              var_num_u16 = va_arg(argp, uint16_t);
 575   4      #if (Enable_UART_TxBinaryNumber == 1)           
 576   4              if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 577   4                 var_numOfDigitsToTransmit_u8 = 16;
 578   4              UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 579   4      #endif        
 580   4              break;
 581   4      
 582   4            case 'B':  /* Argument type is of binary,Read int and convert to binary */
 583   4              var_num_u32 = va_arg(argp, uint32_t);
 584   4      #if (Enable_UART_TxBinaryNumber == 1)       
 585   4              if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 586   4                 var_numOfDigitsToTransmit_u8 = 16;       
 587   4              UART_TxBinaryNumber(var_num_u32,var_numOfDigitsToTransmit_u8);  
 588   4      #endif        
 589   4              break;
 590   4      
 591   4      
 592   4            case 'F':
 593   4            case 'f': /* Argument type is of float, hence read double data from the argp */
 594   4              var_floatNum_f32 = va_arg(argp, double);
 595   4      #if (Enable_UART_TxFloatNumber == 1)        
                      UART_TxFloatNumber(var_floatNum_f32);
              #endif
 598   4              break;
 599   4      
 600   4      
 601   4            case 'S':
 602   4            case 's': /* Argument type is of string, hence get the pointer to sting passed */
 603   4              str = va_arg(argp, char *);
 604   4      #if (Enable_UART_TxString == 1)
 605   4              UART_TxString(str);
 606   4      #endif        
 607   4              break;
 608   4      
 609   4            case '%':
 610   4              UART_TxChar('%');
 611   4              break;
 612   4            }
C51 COMPILER V9.02   UART                                                                  05/20/2016 10:46:22 PAGE 11  

 613   3          }
 614   2          else
 615   2          {
 616   3            /* As '%' is not detected display/transmit the char passed */
 617   3            UART_TxChar(ch);
 618   3          }
 619   2        }
 620   1      
 621   1        va_end(argp);
 622   1      }
 623          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1130    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      85
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
