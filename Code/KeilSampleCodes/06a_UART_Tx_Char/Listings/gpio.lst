C51 COMPILER V9.02   GPIO                                                                  02/26/2016 19:50:10 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Objects\gpio.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\00-libfiles\gpio.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\00-libfiles) DE
                    -BUG OBJECTEXTEND PRINT(.\Listings\gpio.lst) TABS(2) OBJECT(.\Objects\gpio.obj)

line level    source

   1          /***************************************************************************************************
   2                                             ExploreEmbedded    
   3          *****************************************************************************************************
   4           * File:   gpio.h
   5           * Version: 16.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: File contains the the accessing the GPIO pins of a controller.
   9                          First the GPIO pins needs to configured(Input/Output) and later used accordingly.
  10          
  11          The libraries have been tested on ExploreEmbedded development boards. We strongly believe that the 
  12          library works on any of development boards for respective controllers. However, ExploreEmbedded 
  13          disclaims any kind of hardware failure resulting out of usage of libraries, directly or indirectly.
  14          Files may be subject to change without prior notice. The revision history contains the information 
  15          related to updates. 
  16          
  17          
  18          GNU GENERAL PUBLIC LICENSE: 
  19              This program is free software: you can redistribute it and/or modify
  20              it under the terms of the GNU General Public License as published by
  21              the Free Software Foundation, either version 3 of the License, or
  22              (at your option) any later version.
  23          
  24              This program is distributed in the hope that it will be useful,
  25              but WITHOUT ANY WARRANTY; without even the implied warranty of
  26              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  27              GNU General Public License for more details.
  28          
  29              You should have received a copy of the GNU General Public License
  30              along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  31          
  32          Errors and omissions should be reported to codelibraries@exploreembedded.com
  33          ***************************************************************************************************/
  34          
  35          
  36          #include <reg51.h>
  37          #include "stdutils.h"
  38          #include "gpio.h"
  39          
  40          
  41          
  42          /***************************************************************************************************
  43                      void GPIO_PinWrite(gpioPins_et enm_pinNumber, uint8_t v_pinValue_u8)
  44          ****************************************************************************************************
  45           * I/P Arguments: 
  46                          gpioPins_et: pin number which needs to be updated.
  47                                       Refer the gpio.h for pin numbering.
  48                          gpioValue_et: Value to be updated(LOW/HIGH) on the selected pin.
  49                                        
  50          
  51           * Return value    : none
  52          
  53           * description :This function updates the specified value on the selected pin.  
  54                          Before updating the pins status, the pin function should be selected and then
C51 COMPILER V9.02   GPIO                                                                  02/26/2016 19:50:10 PAGE 2   

  55                          the pin should be configured as OUTPUT 
  56          ****************************************************************************************************/
  57          void GPIO_PinWrite(gpioPins_et enm_pinNumber, uint8_t v_pinValue_u8)
  58          {
  59   1      
  60   1          uint8_t v_portNumber_u8;
  61   1      
  62   1      
  63   1          v_portNumber_u8 =  (enm_pinNumber>>3);  // Divide the pin number by 8 go get the PORT number
  64   1          enm_pinNumber  =   enm_pinNumber & 0x07;  // lower 3-bits contains the bit number of a byte 
  65   1      
  66   1          /* Go to particular port after decoding from the pin number and 
  67   1              update the value of the specified pin*/
  68   1          switch(v_portNumber_u8)
  69   1          {
  70   2          case 0:
  71   2              util_UpdateBit(P0,enm_pinNumber,v_pinValue_u8);
  72   2              break;
  73   2      
  74   2          case 1:
  75   2              util_UpdateBit(P1,enm_pinNumber,v_pinValue_u8);
  76   2              break;
  77   2      
  78   2          case 2:
  79   2              util_UpdateBit(P2,enm_pinNumber,v_pinValue_u8);
  80   2              break;
  81   2      
  82   2          case 3:
  83   2              util_UpdateBit(P3,enm_pinNumber,v_pinValue_u8);
  84   2              break;
  85   2          }                
  86   1      }
  87          
  88          
  89          
  90          
  91          
  92          
  93          
  94          
  95          /***************************************************************************************************
  96                              uint8_t GPIO_PinRead(gpioPins_et enm_pinNumber)
  97          ****************************************************************************************************
  98           * I/P Arguments: 
  99                          gpioPins_et: pin number which needs to be read.
 100                                       Refer the gpio.h for pin numbering.
 101          
 102           * Return value    : 
 103                           uint8_t:    Status of the specified pin.
 104          
 105           * description :This function returns the status of the selected pin.
 106                          Before reading the pins status, the pin should be configured as INPUT 
 107          ****************************************************************************************************/
 108          uint8_t GPIO_PinRead(gpioPins_et enm_pinNumber)
 109          {
 110   1          uint8_t v_portNumber_u8;
 111   1          uint8_t returnStatus = 0;
 112   1      
 113   1          v_portNumber_u8 =  (enm_pinNumber>>3); // Divide the pin number by 8 go get the PORT number
 114   1          enm_pinNumber  =     enm_pinNumber & 0x07; // lower 3-bits contains the bit number of a byte 
 115   1      
 116   1          /* Go to particular port after decoding from the pin number and read the pins status */
C51 COMPILER V9.02   GPIO                                                                  02/26/2016 19:50:10 PAGE 3   

 117   1          switch(v_portNumber_u8)     
 118   1          {                             
 119   2          case 0: 
 120   2              returnStatus = util_IsBitSet(P0,enm_pinNumber);
 121   2              break;
 122   2      
 123   2          case 1:
 124   2              returnStatus = util_IsBitSet(P1,enm_pinNumber);
 125   2              break;
 126   2      
 127   2          case 2:
 128   2              returnStatus = util_IsBitSet(P2,enm_pinNumber);
 129   2              break;
 130   2      
 131   2          case 3:
 132   2              returnStatus = util_IsBitSet(P3,enm_pinNumber);
 133   2              break;
 134   2          }                         
 135   1          return returnStatus;
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    321    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
