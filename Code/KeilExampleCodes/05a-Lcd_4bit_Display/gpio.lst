C51 COMPILER V9.02   GPIO                                                                  06/20/2016 16:38:48 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\gpio.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\00-libfiles\gpio.c BROWSE INCDIR(..\00-libfiles) DEBUG OBJECTEXTEND PRIN
                    -T(.\gpio.lst) OBJECT(.\gpio.obj)

line level    source

   1          /***************************************************************************************************
   2                                              ExploreEmbedded Copyright Notice    
   3          *****************************************************************************************************
   4           * File:   gpio.h
   5           * Version: 16.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: File contains the the accessing the GPIO pins of a controller.
   9                          First the GPIO pins needs to configured(Input/Output) and later used accordingly.
  10          
  11          This code has been developed and tested on ExploreEmbedded boards.  
  12          We strongly believe that the library works on any of development boards for respective controllers. 
  13          Check this link http://www.exploreembedded.com/wiki for awesome tutorials on 8051,PIC,AVR,ARM,Robotics,RTO
             -S,IOT.
  14          ExploreEmbedded invests substantial time and effort developing open source HW and SW tools, to support con
             -sider buying the ExploreEmbedded boards.
  15           
  16          The ExploreEmbedded libraries and examples are licensed under the terms of the new-bsd license(two-clause 
             -bsd license).
  17          See also: http://www.opensource.org/licenses/bsd-license.php
  18          
  19          EXPLOREEMBEDDED DISCLAIMS ANY KIND OF HARDWARE FAILURE RESULTING OUT OF USAGE OF LIBRARIES, DIRECTLY OR
  20          INDIRECTLY. FILES MAY BE SUBJECT TO CHANGE WITHOUT PRIOR NOTICE. THE REVISION HISTORY CONTAINS THE INFORMA
             -TION 
  21          RELATED TO UPDATES.
  22           
  23          
  24          Permission to use, copy, modify, and distribute this software and its documentation for any purpose
  25          and without fee is hereby granted, provided that this copyright notices appear in all copies 
  26          and that both those copyright notices and this permission notice appear in supporting documentation.
  27          ***************************************************************************************************/
  28          
  29          
  30          #include <reg51.h>
  31          #include "stdutils.h"
  32          #include "gpio.h"
  33          
  34          
  35          
  36          /***************************************************************************************************
  37                      void GPIO_PinWrite(gpioPins_et enm_pinNumber, uint8_t v_pinValue_u8)
  38          ****************************************************************************************************
  39           * I/P Arguments: 
  40                          gpioPins_et: pin number which needs to be updated.
  41                                       Refer the gpio.h for pin numbering.
  42                          gpioValue_et: Value to be updated(LOW/HIGH) on the selected pin.
  43                                        
  44          
  45           * Return value    : none
  46          
  47           * description :This function updates the specified value on the selected pin.  
  48                          Before updating the pins status, the pin function should be selected and then
  49                          the pin should be configured as OUTPUT 
  50          ****************************************************************************************************/
C51 COMPILER V9.02   GPIO                                                                  06/20/2016 16:38:48 PAGE 2   

  51          void GPIO_PinWrite(gpioPins_et enm_pinNumber, uint8_t v_pinValue_u8)
  52          {
  53   1      
  54   1          uint8_t v_portNumber_u8;
  55   1      
  56   1      
  57   1          v_portNumber_u8 =  (enm_pinNumber>>3);  // Divide the pin number by 8 go get the PORT number
  58   1          enm_pinNumber  =   enm_pinNumber & 0x07;  // lower 3-bits contains the bit number of a byte 
  59   1      
  60   1          /* Go to particular port after decoding from the pin number and 
  61   1              update the value of the specified pin*/
  62   1          switch(v_portNumber_u8)
  63   1          {
  64   2          case 0:
  65   2              util_UpdateBit(P0,enm_pinNumber,v_pinValue_u8);
  66   2              break;
  67   2      
  68   2          case 1:
  69   2              util_UpdateBit(P1,enm_pinNumber,v_pinValue_u8);
  70   2              break;
  71   2      
  72   2          case 2:
  73   2              util_UpdateBit(P2,enm_pinNumber,v_pinValue_u8);
  74   2              break;
  75   2      
  76   2          case 3:
  77   2              util_UpdateBit(P3,enm_pinNumber,v_pinValue_u8);
  78   2              break;
  79   2          }                
  80   1      }
  81          
  82          
  83          
  84          
  85          
  86          
  87          
  88          
  89          /***************************************************************************************************
  90                              uint8_t GPIO_PinRead(gpioPins_et enm_pinNumber)
  91          ****************************************************************************************************
  92           * I/P Arguments: 
  93                          gpioPins_et: pin number which needs to be read.
  94                                       Refer the gpio.h for pin numbering.
  95          
  96           * Return value    : 
  97                           uint8_t:    Status of the specified pin.
  98          
  99           * description :This function returns the status of the selected pin.
 100                          Before reading the pins status, the pin should be configured as INPUT 
 101          ****************************************************************************************************/
 102          uint8_t GPIO_PinRead(gpioPins_et enm_pinNumber)
 103          {
 104   1          uint8_t v_portNumber_u8;
 105   1          uint8_t returnStatus = 0;
 106   1      
 107   1          v_portNumber_u8 =  (enm_pinNumber>>3); // Divide the pin number by 8 go get the PORT number
 108   1          enm_pinNumber  =     enm_pinNumber & 0x07; // lower 3-bits contains the bit number of a byte 
 109   1      
 110   1          /* Go to particular port after decoding from the pin number and read the pins status */
 111   1          switch(v_portNumber_u8)     
 112   1          {                             
C51 COMPILER V9.02   GPIO                                                                  06/20/2016 16:38:48 PAGE 3   

 113   2          case 0: 
 114   2              returnStatus = util_IsBitSet(P0,enm_pinNumber);
 115   2              break;
 116   2      
 117   2          case 1:
 118   2              returnStatus = util_IsBitSet(P1,enm_pinNumber);
 119   2              break;
 120   2      
 121   2          case 2:
 122   2              returnStatus = util_IsBitSet(P2,enm_pinNumber);
 123   2              break;
 124   2      
 125   2          case 3:
 126   2              returnStatus = util_IsBitSet(P3,enm_pinNumber);
 127   2              break;
 128   2          }                         
 129   1          return returnStatus;
 130   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    321    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
